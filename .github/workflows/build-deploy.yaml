name: Build and Deploy

# Once a push registered to the master, dev, staging or a release branch, this workflow is executed.
# It is also executed when a pull request is merged (which leads to a push).
# Then it will run the following jobs:
# - Run terraform to create infrastructure
# - Build the docker images
# - When all builds were successful, push the new images
# - When pushing was successful, deploy the application

on:
  push:
    branches:
      - master
      - dev
      - staging
      - 'releases/**'

jobs:
  set-deployment-type:
    name: Set deployment type (dev/staging/production)
    runs-on: ubuntu-latest
    outputs:
      deployment-type: ${{ steps.set-deployment-type.outputs.type }}
    steps:
      -
        id: set-deployment-type
        run: |
          if [[ $GITHUB_REF_NAME == 'master' ]]; then
            echo "type=prod" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF_NAME == 'dev' ]]; then
            echo "type=dev" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF_NAME == 'staging' ]]; then
            echo "type=staging" >> $GITHUB_OUTPUT
          else
            #version=${$GITHUB_REF_NAME#*/}
            #echo "version=$version" >> $GITHUB_OUTPUT
            echo "type=prod" >> $GITHUB_OUTPUT
          fi

  run-terraform:
    name: Run Terraform and build infrastructure
    needs: set-deployment-type
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v3
      -
        name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_TOKEN }}
      -
        name: CD into Terraform environment
        run: |
          DEPLOYMENT_TYPE=${{ needs.set-deployment-type.outputs.deployment-type }}
          echo $DEPLOYMENT_TYPE  # debug
          cd terraform/environments/$(DEPLOYMENT_TYPE)/  || exit -1
      -
        name: Terraform Init
        run: terraform init
      -
        name: Terraform Apply
        run: terraform apply -auto-approve -input=false
      -
        name: Save repo with files generated by Terraform as tar
        run: tar -cf /tmp/repo.tar .
      -
        name: Upload repo (in tar) as artifact
        uses: actions/upload-artifact@v3
        with:
          name: repo-with-tf-files
          path: /tmp/repo.tar

  build-and-push-docker:
    name: Build and push docker images
    needs:
      - set-deployment-type
      - run-terraform
    uses: ./.github/workflows/docker-build-push.yaml
    with:
      deployment-type: ${{ needs.set-deployment-type.outputs.deployment-type }}
    secrets:
      GCP_KEY: ${{ secrets.GCP_KEY }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

  delete-repo-artifact:
    name: Delete repo artifact with Terraform files
    needs: build-and-push-docker
    uses: geekyeggo/delete-artifact@v2
    with:
      name: repo-with-tf-files

  deploy-application:
    name: Deploy to Google Kubernetes Engine
    needs:
      - set-deployment-type
      - build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v3
      -
        name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GCP_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      -
        name: Install kubectl
        run: sudo snap install kubectl --classic
      -
        name: Install helm
        run: sudo snap install helm --classic
      -
        name: Configure kubectl
        run: |
          DEPLOYMENT_TYPE=${{ needs.set-deployment-type.outputs.deployment-type }}
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          gcloud container clusters get-credentials cluster-$(DEPLOYMENT_TYPE)
      -
        name: Deploy application
        run: |
          DEPLOYMENT_TYPE=${{ needs.set-deployment-type.outputs.deployment-type }}
          helm upgrade --install ingress-nginx ingress-nginx \
            --repo https://kubernetes.github.io/ingress-nginx \
            --namespace ingress-nginx --create-namespace
          
          cd helm || exit -1
          if [[ $DEPLOYMENT_TYPE == 'dev' ]]; then
            helm upgrade --install postgresql-user postgresql-ha \
              --repo https://charts.bitnami.com/bitnami \
              --values=postgresql-user-values.yaml
            helm upgrade --install postgresql-workout postgresql-ha \
              --repo https://charts.bitnami.com/bitnami \
              --values=postgresql-workout-values.yaml
            sleep 10  # required for ingress to fully start up
            helm upgrade --install gymapp cad-gymapp
          elif [[ $DEPLOYMENT_TYPE == 'staging' ]]; then
            # Free Deployment
            helm upgrade --install postgresql-user postgresql-ha \                                                                                               
              --repo https://charts.bitnami.com/bitnami \
              --values=postgresql-user-values.yaml \
              --namespace free --create-namespace
            helm upgrade --install postgresql-workout postgresql-ha \                                                                                                  
              --repo https://charts.bitnami.com/bitnami \
              --values=postgresql-workout-values.yaml \
              --namespace free --create-namespace
            helm upgrade --install gymapp cad-gymapp \
              --values=gymapp-free-deployment.yaml \
              --namespace free --create-namespace
            # Premium Deployment
            helm upgrade --install postgresql-user postgresql-ha \                                                                                               
              --repo https://charts.bitnami.com/bitnami \
              --values=postgresql-user-values.yaml \
              --namespace premium --create-namespace
            helm upgrade --install postgresql-workout postgresql-ha \                                                                                                  
              --repo https://charts.bitnami.com/bitnami \
              --values=postgresql-workout-values.yaml \
              --set ingress.host="gymapp-htwg-staging.com" \
              --namespace premium --create-namespace
            helm upgrade --install gymapp cad-gymapp \
              --values=gymapp-premium-deployment.yaml \
              --set ingress.host="premium.gymapp-htwg-staging.com" \
              --namespace premium --create-namespace
            # Enterprise Deployment:
              # TODO
          else
            # Free Deployment
            helm upgrade --install postgresql-user postgresql-ha \                                                                                               
              --repo https://charts.bitnami.com/bitnami \
              --values=postgresql-user-values.yaml \
              --namespace free --create-namespace
            helm upgrade --install postgresql-workout postgresql-ha \                                                                                                  
              --repo https://charts.bitnami.com/bitnami \
              --values=postgresql-workout-values.yaml \
              --namespace free --create-namespace
            helm upgrade --install gymapp cad-gymapp \
              --values=gymapp-free-deployment.yaml \
              --namespace free --create-namespace
            # Premium Deployment
            helm upgrade --install postgresql-user postgresql-ha \                                                                                               
              --repo https://charts.bitnami.com/bitnami \
              --values=postgresql-user-values.yaml \
              --namespace premium --create-namespace
            helm upgrade --install postgresql-workout postgresql-ha \                                                                                                  
              --repo https://charts.bitnami.com/bitnami \
              --values=postgresql-workout-values.yaml \
              --set ingress.host="gymapp-htwg.com" \
              --namespace premium --create-namespace
            helm upgrade --install gymapp cad-gymapp \
              --values=gymapp-premium-deployment.yaml \
              --set ingress.host="premium.gymapp-htwg.com" \
              --namespace premium --create-namespace
            # Enterprise Deployment:
              # TODO
          fi
          

